#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_STRING_SIZE 20
#define ARRAY_SIZE 59

#define NAME_PROMPT "Enter term to get frequency or type \"quit\" to escape\n>>> " 
//you can use this string as your invitation to the user
#define NEW_LINE_PROMPT ">>> "
//you can use this string as your invitation to the user where the user should input the name

typedef struct person { //hash table
	char name[ARRAY_SIZE];
    int value;
} person;

person* hashtable[ARRAY_SIZE];
int collisions = 0;
int num_terms = 0;

int hash_function(char* s) { //get hash number
    int hash = 0;
        while(*s){
        hash = (hash + *s-'A') % ARRAY_SIZE;
        s++;
}
    return hash;
}

void set_table() { //slots to null
    for (int i = 0; i < ARRAY_SIZE; i++) {
        hashtable[i] = NULL;
    }
}

int insert(person *p) {
    
    if(p == NULL){ // if empty
        return 0;
    }
    int hindex = hash_function(p->name); // get hash index

        for (int i = 0; i < ARRAY_SIZE; i++) {
           int  next = (i + hindex) % ARRAY_SIZE; //linear probing
    
            if (hashtable[next] == NULL) { //slot is empty
                hashtable[next] = p; // put in slot
                num_terms++; // count terms
                return 1;
            }
            else collisions++; //when slot if full
        }
    return 0;
}

person *create_new_person(char *surname){
    person *new_person = (person *)malloc(sizeof(person)); //allocating memory
    strcpy(new_person->name, surname); //putting surname  into name field
    new_person->value = 1; 
    insert(new_person);
    return new_person; //return new_person pointer
}

person *search(char *name){

    int hindex = hash_function(name); // get hash index

    for (int i = 0; i < ARRAY_SIZE; i++) {
        int next = (i + hindex) % ARRAY_SIZE; //linear probing

        if (hashtable[next] != NULL &&
            strcmp(hashtable[next]->name, name) == 0) { //full and same name
            return hashtable[next]; 
        }
    }
    return NULL; //if not found
}

//value is amount of time name is in list, add in the name or increment the count aka value
void addORIncrement(char* name){
        person* p = search(name);
        

    if(p != NULL){ //person is found as num is returned
        p->value++; 
    }   
    else{
        create_new_person(name); // if new name, memory is made
    }
}

void occurance(char* name) {
    person* p = search(name);
    if (p == NULL) { //not found
        printf("%s - 0 \n", name);
    }
    else { //found
        printf("%s - %d \n", name, p->value);
    }
}

// From assignment 0
// Reads strings of alpha numeric characters from input file. Truncates strings which are too long to string_max-1
void next_token ( char *buf, FILE *f, int string_max ) {
	// start by skipping any characters we're not interested in
	buf[0] = fgetc(f);
	while ( !isalnum(buf[0]) && !feof(f) ) { buf[0] = fgetc(f); }
	// read string of alphanumeric characters
	int i=1;
	for (;;) {
		buf[i] = fgetc(f);                // get next character from file
		if( !isalnum(buf[i]) ) { 
            if(buf[i]!=' '){ // we still want to keep spaces
                break; // only load letters and numbers
            }
        } 
		if( feof(f) ) { break; }          // file ended?
		if( i < (string_max-1) ) { ++i; } // truncate strings that are too long
	}
	buf[i] = '\0'; // NULL terminate the string
}


//  Reads the contents of a file and adds them to the hash table - returns 1 if file was successfully read and 0 if not.
int load_file(char* fname) {
    FILE* f;
    char buf[MAX_STRING_SIZE];

    // boiler plate code to ensure we can open the file
    f = fopen(fname, "r");
    if (!f) {
        printf("Unable to open %s\n", fname);
        return 0;
    }

    // read until the end of the file
    while (!feof(f)) {
        next_token(buf, f, MAX_STRING_SIZE);
        addORIncrement(buf);
    }

    printf("File %s loaded\n", fname);
    float load = (float)num_terms/ARRAY_SIZE; //TODO7
    printf(" Capacity: %i\n Num Terms: %i\n Collisions: %i\n Load: %f\n", ARRAY_SIZE, num_terms, collisions, load);
    // always remember to close your file stream
    fclose(f);

    return 1;
}

int main(int argc, char *argv[]) {

    set_table();

    load_file("names.csv");
    char input[MAX_STRING_SIZE];

    printf("%s", NAME_PROMPT);
    scanf("%s", input); // read in

    while (strcmp(input, "quit") != 0) {

        occurance(input);

        printf("%s",NEW_LINE_PROMPT);
        scanf("%s", input); 
    }

    return 0;
}
